    // methode pr lire un fichier
    public static void readFile(File file) throws FileNotFoundException {
            Scanner dict = new Scanner(file);
            while (dict.hasNextLine())
                System.out.println(dict.nextLine());
        }



   public static double computeAlphabetValue(String word){
           WordToLetters w = new WordToLetters(word);
           double value = 0;
           int size = WordToLetters.elementsOf(w).size();
           for(int index =0; index < size; index++){
               int pow= (size-(index+1));
               double val = ( Math.pow(256,pow));
               char letter = (char) WordToLetters.elementsOf(w).get(index);
               value= value + (((int)letter)*val);
               System.out.println(value);
           }
           return value;
       }

       //    public static double computeAlphabetValue(String word){
       //        WordToLetters w = new WordToLetters(word);
       //        double value = 0;
       //        int size = word.length();
       //        for(int index =0; index < size; index++){
       //            int pow= (size-(index+1));
       //            double val = ( Math.pow(256,pow));
       //            char letter = (char) WordToLetters.elementsOf(w).get(index);
       //            value= value + (((int)letter)*val);
       //        }
       //        return value;
       //    }





    static String firstword;
    public static ArrayList<Character> existWord(HashTable hashTable, String mixedWord) {
        WordToLetters word = new WordToLetters(mixedWord);
        ArrayList<Character> complementary = new ArrayList<>();
        for (LinkedList<WordToLetters> list : hashTable.getHashTable()) {
            for( WordToLetters wrd: list){
                System.out.println(wrd.getWord());
                if (contains(mixedWord,wrd.getWord())){
                    firstword = wrd.toString();
                    list.remove(wrd);
                    int i = 0;int j =0;
                    while(i< mixedWord.length() || j< wrd.getWord().length()){
                        if(i< mixedWord.length() ){
                            if (j< (wrd.getWord().length())){
                                if(mixedWord.charAt(i) == wrd.getWord().charAt(j)){
                                    i++;
                                    j++;
                                }else if(i<mixedWord.length() && j <wrd.getWord().length()){
                                    complementary.add(mixedWord.charAt(i));
                                    i++;
                                }
                            }

                        }
                        return complementary;
                    }
                }
            }

        }
        return complementary;
    }
public static void main(String[] args) {
        String str = "yellow";
        char[] charSearch = {'y','e','w'};
        for(int i=0; i<str.length(); i++)
        {
            char chr = str.charAt(i);
            for(int j=0; j<charSearch.length; j++)
            {
                if(charSearch[j] == chr)
                {
                    System.out.println("Char Value "+charSearch[j]+" is present in "+str);
                }
            }
        }


        final int wordLength = sortedWord.length;
                if (this.sumLength <= sortedWord.length) return null;

                final char[] compatibleWord = new char[this.sumLength - wordLength];
                int compatibleWordIndex = 0;
                int sortedWordIndex = 0;

                for (int wordSumIndex = 0; wordSumIndex < this.sumLength; wordSumIndex++) {
                    if ( sortedWordIndex < wordLength && sortedWord[sortedWordIndex] == this.wordSum[wordSumIndex])
                        sortedWordIndex++;
                    else {
                        compatibleWord[compatibleWordIndex] = this.wordSum[wordSumIndex];
                        compatibleWordIndex++;
                    }
                }
                return compatibleWord;
            }